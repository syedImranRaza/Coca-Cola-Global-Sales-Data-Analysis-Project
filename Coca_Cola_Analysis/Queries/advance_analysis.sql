/*
Sales Trends Over Time (Moving Average for Sales)
A moving average helps smooth out fluctuations in sales and identifies trends. 
For example, you can calculate a 3-month moving average of sales.
*/

WITH monthly_sales AS (
    SELECT
        DATE_TRUNC('month', date) AS sales_month,
        SUM(total_revenue) AS monthly_revenue
    FROM Sales
    GROUP BY sales_month
    ORDER BY sales_month
)
SELECT
    sales_month,
    monthly_revenue,
    AVG(monthly_revenue) OVER (
        ORDER BY sales_month
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS moving_avg
FROM monthly_sales;


/*
Customer Lifetime Value (CLV) Analysis
This query helps identify the total revenue generated by each customer, 
which can help with calculating customer lifetime value (CLV).
*/

WITH customer_lifetime AS (
    SELECT
        c.customer_id,
        c.customer_name,
        SUM(s.total_revenue) AS total_revenue,
        COUNT(DISTINCT s.sales_id) AS num_purchases
    FROM Sales s
    JOIN Customer c ON s.customer_id = c.customer_id
    GROUP BY c.customer_id
)
SELECT
    customer_name,
    total_revenue,
    num_purchases,
    total_revenue / num_purchases AS avg_revenue_per_purchase
FROM customer_lifetime
ORDER BY total_revenue DESC;


/*
Ranking Products by Sales Volume and Revenue (Window Functions)
Ranking products by sales volume and revenue provides insight into which products contribute the most.
*/

SELECT 
    p.product_name,
    SUM(s.quantity) AS total_quantity_sold,
    SUM(s.total_revenue) AS total_revenue,
    RANK() OVER (ORDER BY SUM(s.total_revenue) DESC) AS revenue_rank,
    RANK() OVER (ORDER BY SUM(s.quantity) DESC) AS volume_rank
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_revenue DESC;


/*
Salesperson Performance (Top 3 by Region)
This query helps you find the top 3 salespersons based on total revenue generated in each region.
*/

WITH salesperson_revenue AS (
    SELECT
        sp.salesperson_name,
        r.region_name,
        SUM(s.total_revenue) AS total_revenue,
        RANK() OVER (PARTITION BY r.region_name ORDER BY SUM(s.total_revenue) DESC) AS revenue_rank
    FROM Sales s
    JOIN Salesperson sp ON s.region_id = sp.region_id
    JOIN Region r ON s.region_id = r.region_id
    GROUP BY sp.salesperson_name, r.region_name
)
SELECT
    salesperson_name,
    region_name,
    total_revenue
FROM salesperson_revenue
WHERE revenue_rank <= 3
ORDER BY region_name, revenue_rank;


/*
Price Elasticity of Demand
This analysis aims to measure the relationship between price changes and quantity sold.
*/

SELECT 
    p.product_name,
    p.price,
    SUM(s.quantity) AS total_quantity_sold,
    (SUM(s.quantity) - LAG(SUM(s.quantity)) OVER (ORDER BY p.price)) / LAG(SUM(s.quantity)) OVER (ORDER BY p.price) AS elasticity
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
GROUP BY p.product_name, p.price
ORDER BY p.price;


/*
Customer Segmentation by Purchase Behavior
Segment customers based on their purchase frequency, 
using a quantile ranking method to segment customers into four groups (quartiles).
*/

WITH customer_purchases AS (
    SELECT
        c.customer_id,
        c.customer_name,
        COUNT(s.sales_id) AS num_purchases
    FROM Sales s
    JOIN Customer c ON s.customer_id = c.customer_id
    GROUP BY c.customer_id
)
SELECT
    customer_name,
    num_purchases,
    NTILE(4) OVER (ORDER BY num_purchases DESC) AS purchase_segment
FROM customer_purchases;


/*
Sales Seasonality (Year-Over-Year Growth)
This query analyzes year-over-year growth by comparing sales between different years.
*/

WITH yearly_sales AS (
    SELECT 
        DATE_PART('year', s.date) AS sales_year,
        SUM(s.total_revenue) AS yearly_revenue
    FROM Sales s
    GROUP BY sales_year
)
SELECT
    sales_year,
    yearly_revenue,
    (yearly_revenue - LAG(yearly_revenue) OVER (ORDER BY sales_year)) / LAG(yearly_revenue) OVER (ORDER BY sales_year) AS yoy_growth
FROM yearly_sales;


/*
 Identifying the Most Profitable Product-Region Combination
This analysis allows you to identify which combination of product and region generates the most profit.
*/

SELECT 
    p.product_name,
    r.region_name,
    SUM(s.total_revenue) AS total_revenue,
    RANK() OVER (ORDER BY SUM(s.total_revenue) DESC) AS profit_rank
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
JOIN Region r ON s.region_id = r.region_id
GROUP BY p.product_name, r.region_name
ORDER BY profit_rank;


/*
Sales Over a Specific Timeframe (e.g., Last 6 Months)
You can analyze sales over a specific timeframe, such as the last 6 months, to understand more recent trends.
*/

SELECT 
    DATE_TRUNC('month', s.date) AS sales_month,
    SUM(s.total_revenue) AS total_revenue
FROM Sales s
WHERE s.date >= NOW() - INTERVAL '6 months'
GROUP BY sales_month
ORDER BY sales_month;


/*
Customer Retention Analysis
Customer retention is essential for business sustainability. 
This query identifies repeat customers by analyzing the number of times they have made purchases.
*/

WITH customer_retention AS (
    SELECT
        customer_id,
        COUNT(DISTINCT date_trunc('month', date)) AS active_months
    FROM Sales
    GROUP BY customer_id
)
SELECT
    customer_id,
    CASE 
        WHEN active_months = 1 THEN 'One-Time Buyer'
        WHEN active_months BETWEEN 2 AND 4 THEN 'Occasional Buyer'
        WHEN active_months > 4 THEN 'Frequent Buyer'
    END AS customer_type
FROM customer_retention;


/*
Revenue Distribution Across Product Categories
You can further break down revenue,
based on product categories to understand which categories are driving the most sales.
*/

SELECT 
    p.category,
    SUM(s.total_revenue) AS total_revenue,
    RANK() OVER (ORDER BY SUM(s.total_revenue) DESC) AS category_rank
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
GROUP BY p.category
ORDER BY total_revenue DESC;


/*
Average Order Value (AOV)
The average order value is a key metric to assess how much customers spend on average per transaction
*/

SELECT 
    AVG(total_revenue) AS average_order_value
FROM Sales;


/*
Sales and Revenue Forecasting (Using Time Series Data)
Forecast future sales using a simple linear regression 
(done typically using Python/R, but you can export the time series data from PostgreSQL for advanced modeling).
*/

SELECT
    EXTRACT(EPOCH FROM s.date) AS timestamp,  -- Convert date to seconds for linear regression
    SUM(s.total_revenue) AS total_revenue
FROM Sales s
GROUP BY timestamp
ORDER BY timestamp;
